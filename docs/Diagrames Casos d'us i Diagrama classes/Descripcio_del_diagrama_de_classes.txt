~~~~~~~~~~~~~~~~~~~ PERSISTENCIA ~~~~~~~~~~~~~~~~~~~~~~~~

La classe Input s'encarrega de llegir un fitxer. Segueix el patró
singleton: només n'hi ha una instància. Per començar a llegir
un nou fitxer cal cridar a la funció estàtica initialize(String path).

Legeix seqüencialment, és a dir, llegeix els bits per ordre i no 
llegeix cap bit dos vegades. Quan es crida getBits(n) o getMoreBits(n) 
llegeix els n primers bits que no havia llegit i els retorna.

Sovint els algoritmes necessiten llegir dades d'un fitxer en un 
format concret, el que els va bé per operar-hi posteriorment. La
classe Ctrl_Input i els seus fills, cadascun destinat a llegir un 
tipus de fitxer (txt, ppm, jpeg, etc.) fan crides a getBits i 
getMoreBits de la instància única de Input i operen sobre les dades 
obtingudes per retornar-les en un format concret. Com que Input és
singleton diferents instàncies filles de Ctrl_Input poden llegir
del mateix fitxer si és necessari, la qual cosa és molt útil per
llegir d'una carpeta comprimida.

La classe Output s'encarrega d'escriure en un fitxer. Segueix el patró 
singleton, és a dir, només n'hi ha una instància. Per començar a escriure
un nou fitxer cal cridar a la funció estàtica initialize(String path).

Escriu seqüencialment, és a dir, escriu els bits per orde i no sobreescriu 
mai del mateix fitxer. Quan es crida a la funció add(b,n) s'escriuen n bits 
del byte b.

El més comú en el nostre programa és escriure seqüencialment però en un
moment molt concret es necessita escriure amb accés aleatori per això existeix
la classe RandomAcessOutput.

La classe Ctrl_Output crida a la única instància de Output
i la fa servir per escriure a un fitxer. Té vàries funcions add, que
reben dades en diferents formats (Intge, String, ArrayList<Byte>,
etc.). Aquestes s'encarreguen s'escriure les dades rebudes en el
format desitjat mitjançant crides a add sobre la instància Output.

Ctrl_Output també té fills que s'encarreguen d'escriure fitxers en un
format concret.

Per altra banda, la classe Browser s'encarrega de navegar per carpetes,
proporcionar dades bàsiques d'alguns fitxers i crear fitxers temporals.



~~~~~~~~~~~~~~~~~~~~~~ DOMINI ~~~~~~~~~~~~~~~~~~~~~~~~~~
Ctrl_FolferFile s'encarrega de comprimir i descomprimir fitxers o 
carpetes. És responsable de llegir i bona part de la metadata 
(extensió original, mida, etc) i delega a Ctrl_Algorithm la feina
d'escollir, detectar i aplicar algoritmes per comprimir i descomrpimir
fitxers.

Ctrl_Algorithm s'encarrega d'escollir algoritmes en funció d'una
heurística molt senzilla. També s'encarrega de llegir i escriure 
als fitxer s comprimits dos bits, que son la metadata que representa
l'algoritme de compressió. Delega la feina d'aplicar els algoritmes
a Algorithm.

Algorithm és la classe pare dels algoritmes JPEG, LZ78, LZSS, LZW,
que s'encarrequen d'aplicar els algoritmes corresponents.

Algunes classes necessiten fer ús de funcions o estoctures de 
dades que no proporciona Java, com per exemple arbres binaris,
parells o arrays circulars. Aquestes estroctures de dades i 
funcions són les que hem deixat a la capeta utils i s'han creat
segons les necessitats de dites classes.



~~~~~~~~~~~~~~~~~~~~~~ PRESENTACIÓ ~~~~~~~~~~~~~~~~~~~~~~~~~~
A la capa de presentació tenim la classe Main, que conté el main del
programa.

A la carpeta form hi ha les classes que representen elements d'interfície.

I també tenim Ctrl_Presntaico, que s'encarrega de comunicar-se amb la capa
de domini.
